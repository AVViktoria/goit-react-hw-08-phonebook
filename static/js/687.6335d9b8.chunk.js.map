{"version":3,"file":"static/js/687.6335d9b8.chunk.js","mappings":"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","sources":["components/Container/Container.js","redux/contactsAll/contactsSelectors.js","components/Section/Section.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/contactListItem.js","components/ContactList/ContactList.js","components/Phonebook/Phonebook.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n//*    styles..//\nexport default function Container({ children }) {\n  return <div className=\"container\">{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\n//*Node\n// Anything that can be rendered: numbers, strings, elements or an array\n// (or fragment) containing these types.\n","import { createSelector } from 'reselect';\n\nexport const itemsSelector = state => state.phonebook.contacts;\nexport const filterSelector = state => state.filter.filter;\nexport const getIsLoadingSelector = state => state.phonebook.isLoading;\nexport const getError = state => state.phonebook.error;\n\nexport const getFilteredContacts = createSelector(\n  [itemsSelector, filterSelector],\n  (contacts, filter) => {\n    // console.log(contacts);\n    // console.log(filter);\n    const visibleContacts = contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n    // console.log(visibleContacts);\n    return visibleContacts;\n  }\n);\n\n//   const getFilteredContacts = createSelector(\n// [itemsSelector, filterSelector],\n// (contacts, filter) => {\n// const normilizedFilter = filterAllContacts.filter.toLowerCase();\n\n//     return contactsList.filter(contact =>\n//       contact.name\n//         .toLowerCase()\n//         .includes(filterAllContacts.filter.toLowerCase())\n//     );\n//   };\n//   const visibleContacts = getVisibleContacts();\n//   console.log(visibleContacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Section({ children }) {\n  return <section className=\"section\">{children}</section>;\n}\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { postAllContacts } from '../../redux/contactsAll/contactsOperations';\nimport { itemsSelector } from '../../redux/contactsAll/contactsSelectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(itemsSelector);\n\n  //*  берем  данные по сабмиту  кнопки  //\n\n  const addContact = evt => {\n    evt.preventDefault();\n    const checkByName = contacts?.some(\n      item => item.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (checkByName) {\n      alert(`${name} is already in contacts`);\n    } else {\n      const contact = {\n        name,\n        number,\n        completed: false,\n      };\n\n      dispatch(postAllContacts(contact));\n      reset();\n    }\n  };\n\n  //*  очищаем   сбрасываем   форму  //\n  const reset = evt => {\n    setName('');\n    setNumber('');\n    // evt.target.name.value = '';\n    // evt.target.number.value = '';\n  };\n\n  // *  прописываем  внутри инпута   //\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={addContact}>\n      <div className=\"inputBox\">\n        <label className=\"inputLabel\">\n          Name\n          <input\n            className=\"inputContent\"\n            type=\"text\"\n            value={name}\n            onChange={handleChange}\n            name=\"name\"\n            placeholder=\"Name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name\"\n            required\n          />\n        </label>\n      </div>\n      <div className=\"inputBox\">\n        <label className=\"inputLabel\">\n          Number\n          <input\n            className=\"inputContent\"\n            type=\"tel\"\n            value={number}\n            onChange={handleChange}\n            name=\"number\"\n            placeholder=\"XXX XXX XXXX\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Number\"\n            required\n          />\n        </label>\n      </div>\n      <button className=\"inputButton\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\nContactForm.prototype = {\n  addContact: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n};\n\n// const addContact = e => {\n//   e.preventDefault();\n//   const form = e.currentTarget;\n//   dispatch(postAllContacts({ name, number }));\n//   form.reset();\n// };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterChanges } from 'redux/filter/filterSlice';\nimport { filterSelector } from '../../redux/contactsAll/contactsSelectors';\n\nexport default function Filter()  {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterSelector);\n\n  const onValueChanges = e => {\n    const filterValue = e.currentTarget.value;\n    dispatch(filterChanges(filterValue));\n  };\n\n  return (\n    <form>\n      <div className=\"inputBox\">\n        <label className=\"inputLabel\">\n          Find contacts by name\n          <input\n            className=\"inputContent\"\n            type=\"text\"\n            value={filter}\n            onChange={onValueChanges}\n            name=\"filter\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Filter\"\n            required\n          />\n        </label>\n      </div>\n    </form>\n  );\n};\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onValueChanges: PropTypes.func.isRequired,\n};\n\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  delAllContacts,\n  editContacts,\n} from '../../redux/contactsAll/contactsOperations';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        return;\n      case 'number':\n        setNumber(value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  const deleteContactItem = contactId => {\n    dispatch(delAllContacts(contactId));\n  };\n\n  const handleEdit = () => {\n    setIsEdit(prev => !prev);\n    if (isEdit && (name !== contact.name || number !== contact.number)) {\n      return dispatch(editContacts({ ...contact, name, number }));\n    }\n  };\n\n  return (\n    <li className=\"listContacts\">\n      {isEdit ? (\n        <>\n          {' '}\n          <label>\n            Name\n            <input\n              onChange={handleChange}\n              name=\"name\"\n              type=\"text\"\n              value={name}\n            />\n          </label>\n          {'  '}\n          <label>\n            Number\n            <input\n              onChange={handleChange}\n              name=\"number\"\n              type=\"text\"\n              value={number}\n            />\n          </label>\n        </>\n      ) : (\n        <div className=\"titleContact\">\n          <span className=\"contact\">Name: {contact.name}</span>\n          {'  '}\n          <span className=\"contact\">Number: {contact.number}</span>\n        </div>\n      )}\n      <button className=\"listButton\" type=\"button\" onClick={handleEdit}>\n        {isEdit ? 'Save' : 'Edit'}\n      </button>\n      <button\n        className=\"listButton\"\n        type=\"button\"\n        onClick={() => deleteContactItem(contact.id)}\n      >\n        x\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      contact: PropTypes.string.isRequired,\n    })\n  ),\n};\n\n// import { useDispatch } from 'react-redux';\n// import { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import {\n//   delAllContacts,\n//   editContacts,\n// } from '../../redux/contactsAll/contactsOperations';\n\n// export const ContactListItem = ({ contact }) => {\n//   const dispatch = useDispatch();\n//   const [isEdit, setIsEdit] = useState(false);\n//   const [name, setName] = useState(contact.name);\n//   const [number, setNumber] = useState(contact.number);\n\n//   const handleChange = ({ target: { name, value } }) => {\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         return;\n//       case 'number':\n//         setNumber(value);\n//         return;\n//       default:\n//         return;\n//     }\n//   };\n\n//   const deleteContactItem = contactId => {\n//     dispatch(delAllContacts(contactId));\n//   };\n\n//   const handleEdit = () => {\n//     setIsEdit(prev => !prev);\n//     if (isEdit && (name !== contact.name || number !== contact.number)) {\n//       return dispatch(editContacts({ ...contact, name, number }));\n//     }\n//   };\n\n//   return (\n//     <li className=\"listContacts\">\n//       {isEdit ? (\n//         <>\n//           {' '}\n//           <label>\n//             Name\n//             <input\n//               onChange={handleChange}\n//               name=\"name\"\n//               type=\"text\"\n//               value={name}\n//             />\n//           </label>\n//           {'  '}\n//           <label>\n//             Number\n//             <input\n//               onChange={handleChange}\n//               name=\"number\"\n//               type=\"text\"\n//               value={number}\n//             />\n//           </label>\n//         </>\n//       ) : (\n//         <div className=\"titleContact\">\n//           <span className=\"contact\">Name: {contact.name}</span>\n//           {'  '}\n//           <span className=\"contact\">Number: {contact.number}</span>\n//         </div>\n//       )}\n//       <button className=\"listButton\" type=\"button\" onClick={handleEdit}>\n//         {isEdit ? 'Save' : 'Edit'}\n//       </button>\n//       <button\n//         className=\"listButton\"\n//         type=\"button\"\n//         onClick={() => deleteContactItem(contact.id)}\n//       >\n//         x\n//       </button>\n//     </li>\n//   );\n// };\n\n// ContactListItem.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       contact: PropTypes.string.isRequired,\n//     })\n//   ),\n// };\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllContacts } from '../../redux/contactsAll/contactsOperations';\nimport {\n  getIsLoadingSelector,\n  getFilteredContacts,\n} from '../../redux/contactsAll/contactsSelectors';\nimport { ContactListItem } from 'components/ContactListItem/contactListItem';\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getFilteredContacts);\n  const isLoading = useSelector(getIsLoadingSelector);\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <ul>\n          {contacts.map((contact, id) => {\n            return <ContactListItem key={contact.id} contact={contact} />;\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n    })\n  ),\n};\n\n// import { useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getAllContacts } from '../../redux/contactsAll/contactsOperations';\n// import {\n//   itemsSelector,\n//   getIsLoadingSelector,\n//   filterSelector,\n// } from '../../redux/contactsAll/contactsSelectors';\n// import { ContactListItem } from 'components/ContactListItem/contactListItem';\n// export default function ContactList() {\n//   const dispatch = useDispatch();\n//   const contactsList = useSelector(itemsSelector);\n//   const filterAllContacts = useSelector(filterSelector);\n\n//   // const contacts = useSelector(getFilteredContacts);\n//   const isLoading = useSelector(getIsLoadingSelector);\n\n//   useEffect(() => {\n//     dispatch(getAllContacts());\n//   }, [dispatch]);\n\n//   const getVisibleContacts = () => {\n//     // const normilizedFilter = filterAllContacts.filter.toLowerCase();\n//     return contactsList.filter(contact =>\n//       contact.name\n//         .toLowerCase()\n//         .includes(filterAllContacts.filter.toLowerCase())\n//     );\n//   };\n//   const visibleContacts = getVisibleContacts();\n//   console.log(visibleContacts);\n//   return (\n//     <>\n//       {isLoading ? (\n//         <div>Loading...</div>\n//       ) : (\n//         <ul>\n//           {visibleContacts.map(contact => {\n//             return <ContactListItem key={contact.id} contact={contact} />;\n//           })}\n//         </ul>\n//       )}\n//     </>\n//   );\n// }\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.number.isRequired,\n//     })\n//   ),\n// };\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  itemsSelector,\n  getIsLoadingSelector,\n  getError,\n} from '../../redux/contactsAll';\nimport { getAllContacts } from '../../redux/contactsAll/contactsOperations';\n\nimport Section from '../Section';\nimport Container from '../Container';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const allContacts = useSelector(itemsSelector);\n  const isLoading = useSelector(getIsLoadingSelector);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section>\n        <Container>\n          <h1 className=\"title\">Phonebook</h1>\n          <ContactForm />\n        </Container>\n        {allContacts.length ? (\n          <>\n            {' '}\n            <Container>\n              <h2 className=\"title\">Contacts</h2>\n              <Filter />\n              {isLoading && !error && <b>Request in progress...</b>}\n              <ContactList />\n            </Container>\n          </>\n        ) : (\n          <h1 className=\"title\">Phonebook</h1>\n        )}\n      </Section>\n    </>\n  );\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["Container","children","className","itemsSelector","state","phonebook","contacts","filterSelector","filter","getIsLoadingSelector","isLoading","getError","error","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","Section","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","reset","evt","handleChange","e","currentTarget","value","onSubmit","preventDefault","some","item","alert","completed","postAllContacts","type","onChange","placeholder","pattern","title","required","prototype","addContact","PropTypes","Filter","filterValue","filterChanges","onValueChanges","ContactListItem","isEdit","setIsEdit","target","onClick","prev","editContacts","contactId","id","delAllContacts","ContactList","useEffect","getAllContacts","map","Phonebook","allContacts","length","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}